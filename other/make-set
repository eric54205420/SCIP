; longest substring of two unique characters

(define (make-set limit)

  (define (hash x) ; universal hash function
    (define (mod n) (modulo n 4294967296))
    (cond ((boolean? x) (if x 1 0))
          ((symbol? x) (hash (symbol->string x)))
          ((char? x) (char->integer x))
          ((integer? x) (mod x))
          ((real? x)
            (let* ((r (inexact->exact x))
                   (n (numerator r))
                   (d (denominator r)))
              (mod (+ n (* 37 d)))))
          ((rational? x) (mod (+ (numerator x) (* 37 (denominator x)))))
          ((complex? x)
            (mod (+ (hash (real-part x))
                    (* 37 (hash (imag-part x))))))
          ((null? x) 4294967295)
          ((pair? x)
            (let loop ((x x) (s 0))
              (if (null? x) s
                (loop (cdr x) (mod (+ (* 31 s) (hash (car x))))))))
          ((vector? x)
            (let loop ((i (- (vector-length x) 1)) (s 0))
              (if (negative? i) s
                  (loop (- i 1) (mod (+ (* 31 s) (hash (vector-ref x i))))))))
          ((string? x)
            (let loop ((i (- (string-length x) 1)) (s 0))
              (if (negative? i) s
                (loop (- i 1) (mod (+ (* 31 s) (hash (string-ref x i))))))))
          ((procedure? x) (error 'hash "can't hash procedure"))
          ((port? x) (error 'hash "can't hash port"))
          (else (error 'hash "don't know how to hash object"))))

  (define (member? set key)
    (let* ((h (modulo (hash key) limit))
           (b (vector-ref set h)))
      (if (member key b) #t #f)))

  (define (adjoin set key)
    (let* ((h (modulo (hash key) limit))
           (b (vector-ref set h)))
      (cond ((member key b) set)
      (else (vector-set! set h (cons key b)) set))))

  (define (delete set key)
    (define (remove x xs)
      (let loop ((xs xs) (zs (list)))
        (cond ((null? xs) zs)
              ((equal? (car xs) x)
                (append (cdr xs) zs))
              (else (loop (cdr xs) (cons (car xs) zs))))))
    (let* ((h (modulo (hash key) limit))
           (b (vector-ref set h)))
      (cond ((not (member key b)) set)
      (else (vector-set! set h (remove key b)) set))))

  (define (intersect set1 set2)
    (let ((set (make-set limit)))
      (let loop ((keys (enlist set1)))
        (cond ((null? keys) set)
              ((set2 'member? (car keys))
                (set! set (set 'adjoin (car keys)))
                (loop (cdr keys)))
              (else (loop (cdr keys)))))))

  (define (union set1 set2)
    (let ((set (make-set limit)))
      (let loop ((keys (enlist set1)))
        (when (pair? keys)
          (set! set (set 'adjoin (car keys)))
          (loop (cdr keys))))
      (let loop ((keys (set2 'enlist)))
        (when (pair? keys)
          (set! set (set 'adjoin (car keys)))
          (loop (cdr keys))))
      set))

  (define (minus set1 set2)
    (let ((set (make-set limit)))
      (let loop ((keys (enlist set1)))
        (when (pair? keys)
          (set! set (set 'adjoin (car keys)))
          (loop (cdr keys))))
      (let loop ((keys (set2 'enlist)))
        (when (pair? keys)
          (set! set (set 'delete (car keys)))
          (loop (cdr keys))))
      set))

  (define (enlist set)
    (let loop ((i 0) (s (list)))
      (if (= i limit) s
        (loop (+ i 1) (append (vector-ref set i) s)))))

  (define (size set)
    (let loop ((i 0) (s 0))
      (if (= i limit) s
        (loop (+ i 1) (+ s (length (vector-ref set i)))))))

  (define (new set)
    (lambda (message . arg) (dispatch set message arg)))

  (define (dispatch set message arg)
    (case message
      ((member?) (member? set (car arg)))
      ((adjoin) (new (adjoin set (car arg))))
      ((delete) (new (delete set (car arg))))
      ((intersect) (intersect set (car arg)))
      ((union) (union set (car arg)))
      ((minus) (minus set (car arg)))
      ((enlist) (enlist set))
      ((size) (size set))
      (else (error 'set "invalid message"))))

  (new (make-vector limit (list))))

(define (count str)
  (let loop ((cs (string->list str)) (s (make-set 29)))
    (if (null? cs) (s 'size)
      (loop (cdr cs) (s 'adjoin (car cs))))))

(define (two-char str)
  (let ((longest "") (len 0) (n (+ 1 (string-length str))))
    (do ((i 0 (+ i 1))) ((= i n) longest)
      (do ((j (+ i 1) (+ j 1))) ((= j n))
        (when (and (<= (count (substring str i j)) 2)
                   (<= len (- j i -1)))
          (set! longest (substring str i j))
          (set! len (- j i -1)))))))

(display (two-char "abcabcbcbc")) (newline)
(display (two-char "abababcabc")) (newline)
(display (two-char "abcacacabc")) (newline)
